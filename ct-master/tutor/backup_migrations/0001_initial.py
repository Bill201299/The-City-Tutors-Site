# Generated by Django 3.2.5 on 2021-12-19 20:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_timestamp', models.DateTimeField()),
                ('last_edit_timestamp', models.DateTimeField()),
                ('submitter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ethnicity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(choices=[('General', 'General'), ('Harrasment', 'Harrasment'), ('Bug Report', 'Bug Report')], default='General')),
                ('timestamp', models.DateTimeField(default=None)),
                ('status', models.TextField(choices=[('AttentionNeeded', 'Attention Needed'), ('Resolved', 'Resolved'), ('InProgress', 'In Progress')], default='AttentionNeeded')),
                ('staff_note', models.TextField(blank=True, default=None, null=True)),
                ('description', models.TextField()),
                ('contact_email', models.CharField(max_length=200, null=True)),
                ('assigned_staff', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_issues', to=settings.AUTH_USER_MODEL)),
                ('related_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issue_reports', to=settings.AUTH_USER_MODEL)),
                ('submitter', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitter', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_start', models.DateTimeField(default=None, null=True)),
                ('start_datetime', models.DateTimeField(default=None, null=True)),
                ('stop_datetime', models.DateTimeField(default=None, null=True)),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('attendance', models.ManyToManyField(related_name='attended_members', to=settings.AUTH_USER_MODEL)),
                ('follow_up_meeting', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tutor.meeting')),
            ],
        ),
        migrations.CreateModel(
            name='Pronouns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.TextField()),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutor.sector')),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.TextField(choices=[('Monday, 12AM', 'Monday, 12AM'), ('Monday, 1AM', 'Monday, 1AM'), ('Monday, 2AM', 'Monday, 2AM'), ('Monday, 3AM', 'Monday, 3AM'), ('Monday, 4AM', 'Monday, 4AM'), ('Monday, 5AM', 'Monday, 5AM'), ('Monday, 6AM', 'Monday, 6AM'), ('Monday, 7AM', 'Monday, 7AM'), ('Monday, 8AM', 'Monday, 8AM'), ('Monday, 9AM', 'Monday, 9AM'), ('Monday, 10AM', 'Monday, 10AM'), ('Monday, 11AM', 'Monday, 11AM'), ('Monday, 12PM', 'Monday, 12PM'), ('Monday, 1PM', 'Monday, 1PM'), ('Monday, 2PM', 'Monday, 2PM'), ('Monday, 3PM', 'Monday, 3PM'), ('Monday, 4PM', 'Monday, 4PM'), ('Monday, 5PM', 'Monday, 5PM'), ('Monday, 6PM', 'Monday, 6PM'), ('Monday, 7PM', 'Monday, 7PM'), ('Monday, 8PM', 'Monday, 8PM'), ('Monday, 9PM', 'Monday, 9PM'), ('Monday, 10PM', 'Monday, 10PM'), ('Monday, 11PM', 'Monday, 11PM'), ('Tuesday, 12AM', 'Tuesday, 12AM'), ('Tuesday, 1AM', 'Tuesday, 1AM'), ('Tuesday, 2AM', 'Tuesday, 2AM'), ('Tuesday, 3AM', 'Tuesday, 3AM'), ('Tuesday, 4AM', 'Tuesday, 4AM'), ('Tuesday, 5AM', 'Tuesday, 5AM'), ('Tuesday, 6AM', 'Tuesday, 6AM'), ('Tuesday, 7AM', 'Tuesday, 7AM'), ('Tuesday, 8AM', 'Tuesday, 8AM'), ('Tuesday, 9AM', 'Tuesday, 9AM'), ('Tuesday, 10AM', 'Tuesday, 10AM'), ('Tuesday, 11AM', 'Tuesday, 11AM'), ('Tuesday, 12PM', 'Tuesday, 12PM'), ('Tuesday, 1PM', 'Tuesday, 1PM'), ('Tuesday, 2PM', 'Tuesday, 2PM'), ('Tuesday, 3PM', 'Tuesday, 3PM'), ('Tuesday, 4PM', 'Tuesday, 4PM'), ('Tuesday, 5PM', 'Tuesday, 5PM'), ('Tuesday, 6PM', 'Tuesday, 6PM'), ('Tuesday, 7PM', 'Tuesday, 7PM'), ('Tuesday, 8PM', 'Tuesday, 8PM'), ('Tuesday, 9PM', 'Tuesday, 9PM'), ('Tuesday, 10PM', 'Tuesday, 10PM'), ('Tuesday, 11PM', 'Tuesday, 11PM'), ('Wednesday, 12AM', 'Wednesday, 12AM'), ('Wednesday, 1AM', 'Wednesday, 1AM'), ('Wednesday, 2AM', 'Wednesday, 2AM'), ('Wednesday, 3AM', 'Wednesday, 3AM'), ('Wednesday, 4AM', 'Wednesday, 4AM'), ('Wednesday, 5AM', 'Wednesday, 5AM'), ('Wednesday, 6AM', 'Wednesday, 6AM'), ('Wednesday, 7AM', 'Wednesday, 7AM'), ('Wednesday, 8AM', 'Wednesday, 8AM'), ('Wednesday, 9AM', 'Wednesday, 9AM'), ('Wednesday, 10AM', 'Wednesday, 10AM'), ('Wednesday, 11AM', 'Wednesday, 11AM'), ('Wednesday, 12PM', 'Wednesday, 12PM'), ('Wednesday, 1PM', 'Wednesday, 1PM'), ('Wednesday, 2PM', 'Wednesday, 2PM'), ('Wednesday, 3PM', 'Wednesday, 3PM'), ('Wednesday, 4PM', 'Wednesday, 4PM'), ('Wednesday, 5PM', 'Wednesday, 5PM'), ('Wednesday, 6PM', 'Wednesday, 6PM'), ('Wednesday, 7PM', 'Wednesday, 7PM'), ('Wednesday, 8PM', 'Wednesday, 8PM'), ('Wednesday, 9PM', 'Wednesday, 9PM'), ('Wednesday, 10PM', 'Wednesday, 10PM'), ('Wednesday, 11PM', 'Wednesday, 11PM'), ('Thursday, 12AM', 'Thursday, 12AM'), ('Thursday, 1AM', 'Thursday, 1AM'), ('Thursday, 2AM', 'Thursday, 2AM'), ('Thursday, 3AM', 'Thursday, 3AM'), ('Thursday, 4AM', 'Thursday, 4AM'), ('Thursday, 5AM', 'Thursday, 5AM'), ('Thursday, 6AM', 'Thursday, 6AM'), ('Thursday, 7AM', 'Thursday, 7AM'), ('Thursday, 8AM', 'Thursday, 8AM'), ('Thursday, 9AM', 'Thursday, 9AM'), ('Thursday, 10AM', 'Thursday, 10AM'), ('Thursday, 11AM', 'Thursday, 11AM'), ('Thursday, 12PM', 'Thursday, 12PM'), ('Thursday, 1PM', 'Thursday, 1PM'), ('Thursday, 2PM', 'Thursday, 2PM'), ('Thursday, 3PM', 'Thursday, 3PM'), ('Thursday, 4PM', 'Thursday, 4PM'), ('Thursday, 5PM', 'Thursday, 5PM'), ('Thursday, 6PM', 'Thursday, 6PM'), ('Thursday, 7PM', 'Thursday, 7PM'), ('Thursday, 8PM', 'Thursday, 8PM'), ('Thursday, 9PM', 'Thursday, 9PM'), ('Thursday, 10PM', 'Thursday, 10PM'), ('Thursday, 11PM', 'Thursday, 11PM'), ('Friday, 12AM', 'Friday, 12AM'), ('Friday, 1AM', 'Friday, 1AM'), ('Friday, 2AM', 'Friday, 2AM'), ('Friday, 3AM', 'Friday, 3AM'), ('Friday, 4AM', 'Friday, 4AM'), ('Friday, 5AM', 'Friday, 5AM'), ('Friday, 6AM', 'Friday, 6AM'), ('Friday, 7AM', 'Friday, 7AM'), ('Friday, 8AM', 'Friday, 8AM'), ('Friday, 9AM', 'Friday, 9AM'), ('Friday, 10AM', 'Friday, 10AM'), ('Friday, 11AM', 'Friday, 11AM'), ('Friday, 12PM', 'Friday, 12PM'), ('Friday, 1PM', 'Friday, 1PM'), ('Friday, 2PM', 'Friday, 2PM'), ('Friday, 3PM', 'Friday, 3PM'), ('Friday, 4PM', 'Friday, 4PM'), ('Friday, 5PM', 'Friday, 5PM'), ('Friday, 6PM', 'Friday, 6PM'), ('Friday, 7PM', 'Friday, 7PM'), ('Friday, 8PM', 'Friday, 8PM'), ('Friday, 9PM', 'Friday, 9PM'), ('Friday, 10PM', 'Friday, 10PM'), ('Friday, 11PM', 'Friday, 11PM'), ('Saturday, 12AM', 'Saturday, 12AM'), ('Saturday, 1AM', 'Saturday, 1AM'), ('Saturday, 2AM', 'Saturday, 2AM'), ('Saturday, 3AM', 'Saturday, 3AM'), ('Saturday, 4AM', 'Saturday, 4AM'), ('Saturday, 5AM', 'Saturday, 5AM'), ('Saturday, 6AM', 'Saturday, 6AM'), ('Saturday, 7AM', 'Saturday, 7AM'), ('Saturday, 8AM', 'Saturday, 8AM'), ('Saturday, 9AM', 'Saturday, 9AM'), ('Saturday, 10AM', 'Saturday, 10AM'), ('Saturday, 11AM', 'Saturday, 11AM'), ('Saturday, 12PM', 'Saturday, 12PM'), ('Saturday, 1PM', 'Saturday, 1PM'), ('Saturday, 2PM', 'Saturday, 2PM'), ('Saturday, 3PM', 'Saturday, 3PM'), ('Saturday, 4PM', 'Saturday, 4PM'), ('Saturday, 5PM', 'Saturday, 5PM'), ('Saturday, 6PM', 'Saturday, 6PM'), ('Saturday, 7PM', 'Saturday, 7PM'), ('Saturday, 8PM', 'Saturday, 8PM'), ('Saturday, 9PM', 'Saturday, 9PM'), ('Saturday, 10PM', 'Saturday, 10PM'), ('Saturday, 11PM', 'Saturday, 11PM'), ('Sunday, 12AM', 'Sunday, 12AM'), ('Sunday, 1AM', 'Sunday, 1AM'), ('Sunday, 2AM', 'Sunday, 2AM'), ('Sunday, 3AM', 'Sunday, 3AM'), ('Sunday, 4AM', 'Sunday, 4AM'), ('Sunday, 5AM', 'Sunday, 5AM'), ('Sunday, 6AM', 'Sunday, 6AM'), ('Sunday, 7AM', 'Sunday, 7AM'), ('Sunday, 8AM', 'Sunday, 8AM'), ('Sunday, 9AM', 'Sunday, 9AM'), ('Sunday, 10AM', 'Sunday, 10AM'), ('Sunday, 11AM', 'Sunday, 11AM'), ('Sunday, 12PM', 'Sunday, 12PM'), ('Sunday, 1PM', 'Sunday, 1PM'), ('Sunday, 2PM', 'Sunday, 2PM'), ('Sunday, 3PM', 'Sunday, 3PM'), ('Sunday, 4PM', 'Sunday, 4PM'), ('Sunday, 5PM', 'Sunday, 5PM'), ('Sunday, 6PM', 'Sunday, 6PM'), ('Sunday, 7PM', 'Sunday, 7PM'), ('Sunday, 8PM', 'Sunday, 8PM'), ('Sunday, 9PM', 'Sunday, 9PM'), ('Sunday, 10PM', 'Sunday, 10PM'), ('Sunday, 11PM', 'Sunday, 11PM')])),
                ('day', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)])),
                ('time', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(23)])),
            ],
        ),
        migrations.CreateModel(
            name='GeneralIssue',
            fields=[
                ('issue_description', models.TextField()),
                ('issue', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='general_issue', serialize=False, to='tutor.issue')),
            ],
        ),
        migrations.CreateModel(
            name='HarassIssue',
            fields=[
                ('issue_description', models.TextField()),
                ('issue', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='harass_issue', serialize=False, to='tutor.issue')),
            ],
        ),
        migrations.CreateModel(
            name='UserComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tutor.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TutorTraining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('what_is_minimalism', models.TextField()),
                ('resources_for_control', models.TextField()),
                ('video_conference_applications', models.TextField()),
                ('facial_and_body_language', models.TextField()),
                ('speaking_and_language', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TutorRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.TextField(blank=True, choices=[('Queued', 'Queued'), ('Active', 'Active')], default=None, null=True)),
                ('timestamp', models.DateTimeField()),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutor.subject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TuteeGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutor.meeting')),
                ('tutee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TuteeAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment', models.IntegerField(null=True)),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutor.meeting')),
                ('tutee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RoleplayTraining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('what_difficulties', models.TextField()),
                ('what_strategies', models.TextField()),
                ('what_could_you_have_done_better', models.TextField()),
                ('how_did_tutor_help', models.TextField()),
                ('what_did_you_learn', models.TextField()),
                ('how_can_tutor_improve', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('nickname', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('zip_code', models.CharField(blank=True, default=None, max_length=5, null=True)),
                ('can_speak_english', models.BooleanField(default=False)),
                ('onboarded', models.BooleanField(default=False)),
                ('parent_or_guardian_name', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, null=True, region=None)),
                ('offered_hours', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('tutee_contact', models.TextField(default=None, null=True)),
                ('account_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tutor.accounttype')),
                ('available', models.ManyToManyField(blank=True, to='tutor.TimeSlot')),
                ('ethnicity', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tutor.ethnicity')),
                ('gender', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tutor.gender')),
                ('offered_sectors', models.ManyToManyField(blank=True, related_name='tutor', to='tutor.Sector')),
                ('offered_subjects', models.ManyToManyField(blank=True, related_name='tutor', to='tutor.Subject')),
                ('pronouns', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tutor.pronouns')),
                ('sector', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tutee', to='tutor.sector')),
                ('site', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tutor.site')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrientationTraining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tutor_role', models.TextField(verbose_name='What do you understand your role as a tutor to be?')),
                ('instructor_does', models.TextField(verbose_name='What is the role of an instructor?')),
                ('tutor_does', models.TextField(verbose_name='What does a tutor do?')),
                ('tutor_trainer_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='On a scale of 1-5, how knowledgeable was your trainer?')),
                ('training_practical', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='On a scale of 1-5, how practical was the training?')),
                ('overall_quality_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='On a scale of 1-5, how would you rate the overall quality of the training?')),
                ('suggestions', models.TextField(verbose_name='What suggestions would you have for future training?')),
                ('tutor_trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orientation_training_form', to='tutor.profile', verbose_name='Who was your tutor trainer?')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MeetingMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(choices=[('Pending Confirmation', 'Pending Confirmation'), ('Confirmed', 'Confirmed'), ('Cancelled', 'Cancelled')], default='Pending Confirmation')),
                ('user_role', models.TextField(choices=[('Tutor', 'Tutor'), ('Tutee', 'Tutee')])),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutor.meeting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='meeting',
            name='members',
            field=models.ManyToManyField(through='tutor.MeetingMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='requests',
            field=models.ManyToManyField(to='tutor.TutorRequest'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='scheduled_time_slot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutor.timeslot'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='subject',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tutor.subject'),
        ),
        migrations.CreateModel(
            name='BackgroundCheckRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(choices=[('Queued', 'Queued'), ('Approved', 'Approved'), ('Denied', 'Denied')])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TuteeIssue',
            fields=[
                ('issue_description', models.TextField()),
                ('issue', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='tutee_issue', serialize=False, to='tutor.issue')),
                ('issue_tutee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutee_issue_tutee', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
