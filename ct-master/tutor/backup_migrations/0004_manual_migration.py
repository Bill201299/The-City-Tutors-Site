# Generated by Django 3.2.5 on 2021-11-28 19:25

from django.db import migrations
import csv
import string
import calendar
import random
from datetime import datetime




def setup_test(apps, schema_editor):
    User = apps.get_model("auth", "User")
    Profile = apps.get_model("tutor", "Profile")
    TimeSlot = apps.get_model("tutor", "TimeSlot")
    Subject = apps.get_model("tutor", "Subject")
    Sector = apps.get_model("tutor", "Sector")
    Site = apps.get_model("tutor", "Site")
    Pronouns = apps.get_model("tutor", "Pronouns")
    AccountType = apps.get_model("tutor", "AccountType")
    BackgroundCheckRequest = apps.get_model("tutor", "BackgroundCheckRequest")

    def create_user(record):
        username = record['id']
        email = record['email']
        password = "".join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=8))
        user = User.objects.create_user(
            username=username,
            email=email,
            password=password,
        )
        return user

    def create_profile(user, record):
        full_name = record['first'] + " " + record['last']
        nickname = record['first']
        if "they" in record["pronouns"].lower():
            record["pronouns"] = "They/them/their"
        pronouns = Pronouns.objects.get(display=record['pronouns'])
        account_type = AccountType.objects.get(display="Tutor")
        offered_hours = record['maxHours']
        profile = Profile.objects.create(
            user=user,
            full_name=full_name,
            nickname=nickname,
            account_type=account_type,
            pronouns=pronouns,
            offered_hours=offered_hours,
        )
        return profile

    def add_subjects(profile, record):
        math_keywords = ["math"]
        english_keywords = ["english", "reading", "writing"]

        sector_obj = Sector.objects.get(display="Elementary School")
        math_subject = Subject.objects.get(display="Math", sector=sector_obj)
        english_subject = Subject.objects.get(display="English", sector=sector_obj)
        subjects_k_6 = record["k6Subjects"].lower()
        if any(math_keyword in subjects_k_6 for math_keyword in math_keywords):
            profile.offered_subjects.add(math_subject)
        if any(english_keyword in subjects_k_6 for english_keyword in english_keywords):
            profile.offered_subjects.add(english_subject)

        sector_obj = Sector.objects.get(display="Middle School")
        math_subject = Subject.objects.get(display="Math", sector=sector_obj)
        english_subject = Subject.objects.get(display="English", sector=sector_obj)
        subjects_7_12 = record["seven12Subjects"].lower()
        if any(math_keyword in subjects_7_12 for math_keyword in math_keywords):
            profile.offered_subjects.add(math_subject)
        if any(english_keyword in subjects_7_12 for english_keyword in english_keywords):
            profile.offered_subjects.add(english_subject)

    def add_availability(profile, record):
        for weekday_num, weekday in enumerate(calendar.day_name):
            weekday = weekday.lower()
            time_key = weekday + "Times"
            time_string = record[time_key]
            time_strings = time_string.split(",")
            for time_string in time_strings:
                if not time_string:
                    continue
                start_time_string, end_time_string = time_string.split("-")
                start_time_string = start_time_string.strip()
                end_time_string = end_time_string.strip()
                start_time = datetime.strptime(start_time_string, "%I:%M %p").time()
                end_time = datetime.strptime(end_time_string, "%I:%M %p").time()
                time_slot = TimeSlot.objects.get(day=weekday_num, time=start_time.hour)
                profile.available.add(time_slot)

    def add_sector(profile, record):
        sector_string = record['sector']
        sector_string = sector_string.lower()
        sector_k_6 = Sector.objects.get(display="Elementary School")
        sector_7_12 = Sector.objects.get(display="Middle School")
        if "Elementary School" in sector_string:
            profile.offered_sectors.add(sector_k_6)
        if "Middle School" in sector_string:
            profile.offered_sectors.add(sector_7_12)

    def add_backgroundcheckrequest(user, record):
        status = "Queued"
        if record['Completed BC?'] == 'x':
            status = "Approved"
        BackgroundCheckRequest.objects.create(
            user=user,
            status=status,
        )

    def add_phone_number(profile, record):
        profile.phone_number = record['Phone Number']
        profile.save()

    with open("teachers.csv") as f:
        reader = csv.DictReader(f)
        records = list(reader)

    for record in records:
        # testing record
        if record['id'].startswith("TT"):
            continue
        user = create_user(record)
        profile = create_profile(user, record)
        add_availability(profile, record)
        add_subjects(profile, record)
        add_sector(profile, record)


class Migration(migrations.Migration):

    dependencies = [
        ('tutor', '0003_manual_test'),
    ]

    operations = [
        migrations.RunPython(setup_test),
    ]
